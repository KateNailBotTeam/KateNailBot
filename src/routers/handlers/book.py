import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from src.exceptions.booking import BookingError
from src.exceptions.callback import InvalidCallbackError
from src.keyboards.book import create_booking_list_kb, create_confirm_cancel_booking_kb
from src.keyboards.calendar import (
    create_calendar_for_available_dates,
    create_choose_time_keyboard,
)
from src.services.schedule import ScheduleService
from src.states.cancel_booking import CancelBooking
from src.states.choose_visit_datetime import ChooseVisitDatetime

router = Router(name=__name__)
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "book")
async def show_days(
    callback: CallbackQuery, state: FSMContext, schedule_service: ScheduleService
) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.", callback.from_user.id)
    if not isinstance(callback.message, Message):
        logger.warning("callback.message –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Message")
        raise InvalidCallbackError("callback.message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Message")
    await callback.answer()

    available_dates = schedule_service.get_available_dates()

    await state.set_state(ChooseVisitDatetime.waiting_for_date)
    await state.update_data(telegram_id=callback.from_user.id)

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏",
        reply_markup=create_calendar_for_available_dates(available_dates),
    )


@router.callback_query(
    ChooseVisitDatetime.waiting_for_date, F.data.startswith("choose_date_")
)
async def show_time(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    schedule_service: ScheduleService,
) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏.", callback.from_user.id)
    if not isinstance(callback.message, Message) or not isinstance(callback.data, str):
        logger.warning("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏")
        raise InvalidCallbackError("–æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback")
    await callback.answer()

    visit_date_str = callback.data.replace("choose_date_", "")
    visit_date = datetime.strptime(visit_date_str, "%Y_%m_%d").date()

    await state.update_data(visit_date_str=visit_date_str)
    await state.set_state(ChooseVisitDatetime.waiting_for_time)

    time_slots = schedule_service.get_time_slots(visit_date=visit_date)

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–µ—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
        reply_markup=await create_choose_time_keyboard(
            time_slots=time_slots,
            session=session,
            schedule_service=schedule_service,
            visit_date=visit_date,
        ),
    )


@router.callback_query(F.data == "unavailable_time")
async def send_message_to_choose_new_time(callback: CallbackQuery) -> None:
    await callback.answer("–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑ —Å–ø–∏—Å–∫–∞")


@router.callback_query(
    ChooseVisitDatetime.waiting_for_time, F.data.startswith("timeline_")
)
async def finish_booking(
    callback: CallbackQuery,
    state: FSMContext,
    schedule_service: ScheduleService,
    session: AsyncSession,
) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±–∏—Ä–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.", callback.from_user.id)
    if not isinstance(callback.message, Message) or not isinstance(callback.data, str):
        logger.warning("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
        raise InvalidCallbackError("–æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback")

    await callback.answer()

    visit_time_str = callback.data.replace("timeline_", "")
    visit_time = datetime.strptime(visit_time_str, "%H:%M").time()

    data = await state.get_data()
    visit_date_str = data.get("visit_date_str")
    user_telegram_id = data.get("telegram_id")

    if not visit_date_str:
        logger.warning("–î–∞—Ç–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", visit_date_str)
        raise BookingError(f"–î–∞—Ç–∞ {visit_date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if not user_telegram_id:
        logger.warning("–¢–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        raise BookingError("–¢–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    visit_date = datetime.strptime(visit_date_str, "%Y_%m_%d").date()

    await schedule_service.create_busy_slot(
        session=session,
        visit_date=visit_date,
        visit_time=visit_time,
        user_telegram_id=user_telegram_id,
    )

    await callback.message.edit_text(
        text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞"
        f" <b>{visit_date.strftime('%d.%m.%Y')}</b>,"
        f" –≤—Ä–µ–º—è <b>{visit_time.strftime('%H:%M')}</b>",
        parse_mode=ParseMode.HTML,
    )
    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ %s %s",
        user_telegram_id,
        visit_date,
        visit_time,
    )

    await state.clear()


@router.callback_query(F.data == "user_bookings")
async def my_bookings(
    callback: CallbackQuery, schedule_service: ScheduleService, session: AsyncSession
) -> None:
    if not isinstance(callback.message, Message):
        logger.warning(
            "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        raise InvalidCallbackError("–æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback")

    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.", callback.from_user.id)
    user_telegram_id = callback.from_user.id
    schedules = await schedule_service.show_user_schedules(
        session=session, user_telegram_id=user_telegram_id
    )

    if not schedules:
        await callback.message.edit_text(
            text="‚ú® –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É? –ù–∞–∂–º–∏—Ç–µ /book",
            parse_mode=ParseMode.HTML,
        )
        return

    message_text = [
        "üå∏ <b>–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏</b> üå∏\n",
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
        *[
            f"\n<b>üìå –ó–∞–ø–∏—Å—å ‚Ññ{index}</b>\n"
            f"üóì <i>–î–∞—Ç–∞:</i> <b>{schedule.strftime('%d.%m.%Y')}</b>\n"
            f"‚è∞ <i>–í—Ä–µ–º—è:</i> <code>{schedule.strftime('%H:%M')}</code>\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
            for index, schedule in enumerate(schedules, 1)
        ],
    ]

    await callback.message.edit_text(
        text="".join(message_text), parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "cancel_booking")
async def choose_date_for_cancel_booking(
    callback: CallbackQuery,
    session: AsyncSession,
    schedule_service: ScheduleService,
    state: FSMContext,
) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏.", callback.from_user.id)
    if not isinstance(callback.message, Message):
        logger.warning("callback.message –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Message")
        raise InvalidCallbackError("callback.message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Message")
    user_telegram_id = callback.from_user.id
    schedules = await schedule_service.show_user_schedules(
        session=session, user_telegram_id=user_telegram_id
    )

    if not schedules:
        await callback.message.edit_text(
            text="‚ú® –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É? –ù–∞–∂–º–∏—Ç–µ /book",
            parse_mode=ParseMode.HTML,
        )
        return

    await state.set_state(CancelBooking.waiting_for_choose_datetime)
    await state.update_data(user_telegram_id=user_telegram_id)

    await callback.message.edit_text(
        text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_booking_list_kb(schedules=schedules),
    )


@router.callback_query(
    CancelBooking.waiting_for_choose_datetime, F.data.startswith("cancel_")
)
async def confirm_cancel_booking(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏.", callback.from_user.id)
    if not isinstance(callback.message, Message) or not isinstance(callback.data, str):
        logger.warning("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã")
        raise InvalidCallbackError("–æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback")
    datetime_str_to_cancel = callback.data.replace("cancel_", "")
    datetime_to_cancel = datetime.strptime(datetime_str_to_cancel, "%Y-%m-%d %H:%M:%S")

    await state.set_state(CancelBooking.waiting_for_cancel_datetime)
    await state.update_data(datetime_str_to_cancel=datetime_str_to_cancel)

    await callback.message.edit_text(
        text=f"–¢–æ—á–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ üóì"
        f" <b>{datetime_to_cancel.strftime('%d.%m.%y')}</b>"
        f" –≤ <b>{datetime_to_cancel.strftime('%H:%M')}</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_confirm_cancel_booking_kb(),
    )


@router.callback_query(
    CancelBooking.waiting_for_cancel_datetime, F.data.in_(["confirm_yes", "confirm_no"])
)
async def cancel_booking(
    callback: CallbackQuery,
    state: FSMContext,
    schedule_service: ScheduleService,
    session: AsyncSession,
) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏.", callback.from_user.id)
    if not isinstance(callback.message, Message) or not isinstance(callback.data, str):
        logger.warning("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã")
        raise InvalidCallbackError("–æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Callback")

    data = await state.get_data()
    datetime_str_to_cancel = data.get("datetime_str_to_cancel")
    user_telegram_id = data.get("user_telegram_id")

    if not datetime_str_to_cancel:
        raise BookingError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    if not user_telegram_id:
        raise BookingError("–ù–µ –Ω–∞–π–¥–µ–Ω user_telegram_id –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    datetime_to_cancel = datetime.strptime(datetime_str_to_cancel, "%Y-%m-%d %H:%M:%S")

    if callback.data == "confirm_yes":
        await schedule_service.cancel_booking(
            session=session,
            user_telegram_id=user_telegram_id,
            datetime_to_cancel=datetime_to_cancel,
        )

        await callback.message.edit_text(
            text=f"‚úñÔ∏è –ó–∞–ø–∏—Å—å üóì <b>{datetime_to_cancel.strftime('%d.%m.%y')}</b>"
            f" –≤ <b>{datetime_to_cancel.strftime('%H:%M')}</b>"
            f" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ %s",
            user_telegram_id,
            datetime_to_cancel,
        )
    else:
        await callback.message.edit_text(
            text=f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å üóì"
            f" <b>{datetime_to_cancel.strftime('%d.%m.%y')}</b>"
            f" –≤ <b>{datetime_to_cancel.strftime('%H:%M')}</b>"
            f" –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            parse_mode=ParseMode.HTML,
        )
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ %s",
            user_telegram_id,
            datetime_to_cancel,
        )

    await state.clear()
