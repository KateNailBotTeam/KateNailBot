import asyncio
import logging
from datetime import date, datetime, timedelta

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from sqlalchemy import and_, delete, select, update
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from sqlalchemy.orm.attributes import flag_modified

from src.exceptions.booking import BookingError
from src.keyboards.calendar import WEEKDAYS
from src.models import User
from src.models.day_off import DaysOff
from src.models.schedule import Schedule
from src.models.schedule_settings import ScheduleSettings
from src.services.base import BaseService
from src.texts.status_appointments import APPOINTMENT_TYPE_STATUS

logger = logging.getLogger(__name__)


class AdminService(BaseService[Schedule]):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç:
    - –ü–æ–ª—É—á–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏.
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –∏ –Ω–µ—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏.
    - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """

    def __init__(self) -> None:
        super().__init__(Schedule)

    @staticmethod
    async def get_booking(
        session: AsyncSession,
        booking_id: int,
    ) -> Schedule | None:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID
        """
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è id=%d", booking_id)
        stmt = (
            select(Schedule)
            .options(joinedload(Schedule.user))
            .where(Schedule.id == booking_id)
        )
        result = await session.execute(stmt)
        booking = result.scalar_one_or_none()
        logger.info("–ë—Ä–æ–Ω—å: %s", booking_id)

        return booking

    @staticmethod
    async def get_all_bookings(
        session: AsyncSession,
    ) -> list[Schedule]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–æ—à–ª—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        stmt = (
            select(Schedule)
            .options(joinedload(Schedule.user))
            .where(and_(Schedule.is_booked, Schedule.visit_datetime >= datetime.now()))
            .order_by(Schedule.visit_datetime)
        )
        result = await session.execute(stmt)
        bookings = list(result.scalars().all())

        logger.info("–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %d", len(bookings))
        return bookings

    async def set_booking_approval(
        self,
        session: AsyncSession,
        bot: Bot,
        schedule_id: int,
        approved: bool | None,
    ) -> Schedule | None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.
        """
        updated_booking = await self.update(
            session=session, obj_id=schedule_id, new_data={"is_approved": approved}
        )
        status = APPOINTMENT_TYPE_STATUS.get(approved)
        if updated_booking and updated_booking.user_telegram_id:
            logger.info(
                "–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ id=%s –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ %s",
                schedule_id,
                status,
            )
            visit_datetime_str = updated_booking.visit_datetime.strftime(
                "%d.%m.%y %H:%M"
            )
            text = (
                f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ <b>{visit_datetime_str}</b>\n "
                f"–ø–æ–ª—É—á–∏–ª–∞ —Å—Ç–∞—Ç—É—Å <b>{status}</b>"
            )
            await bot.send_message(
                chat_id=updated_booking.user_telegram_id,
                text=text,
                parse_mode=ParseMode.HTML,
            )

        else:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ %s", schedule_id
            )
            raise BookingError(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {schedule_id}"
            )
        return updated_booking

    @staticmethod
    async def set_workdays(
        first_day: date,
        last_day: date,
        is_work: bool,
        session: AsyncSession,
    ) -> None:
        if first_day > last_day:
            logger.warning(
                "–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–Ω–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º:"
                " –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π (%s > %s)",
                first_day,
                last_day,
            )
            raise ValueError("first_day_off –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ last_day_off")

        if is_work:
            await session.execute(
                delete(DaysOff).where(DaysOff.day_off.between(first_day, last_day))
            )
            await session.commit()

        else:
            current_date = first_day
            while current_date <= last_day:
                await session.execute(
                    insert(DaysOff)
                    .values(day_off=current_date)
                    .on_conflict_do_nothing(index_elements=["day_off"])
                )
                current_date += timedelta(days=1)
            await session.commit()

        logger.info(
            "%s –¥–Ω–∏ —Å %s –ø–æ %s –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
            "–†–∞–±–æ—á–∏–µ" if is_work else "–ù–µ—Ä–∞–±–æ—á–∏–µ",
            first_day,
            last_day,
        )

    @staticmethod
    async def toggle_working_day(
        session: AsyncSession, day_index: int, schedule_settings: ScheduleSettings
    ) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –¥–µ–Ω—å –º–µ–∂–¥—É —Ä–∞–±–æ—á–∏–º –∏ –Ω–µ—Ä–∞–±–æ—á–∏–º, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î."""

        if not 0 <= day_index <= len(WEEKDAYS):
            raise ValueError("day_index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-6")

        if day_index in schedule_settings.working_days:
            schedule_settings.working_days.remove(day_index)
        else:
            schedule_settings.working_days.append(day_index)

        schedule_settings.working_days.sort()
        flag_modified(schedule_settings, "working_days")

        await session.commit()

    @staticmethod
    async def send_message_from_admin_to_all_users(
        bot: Bot,
        session: AsyncSession,
        text_message: str,
        disable_notification: bool = True,
    ) -> str:
        stmt = select(User.telegram_id).where(User.is_admin.is_(False))
        result = await session.execute(stmt)
        users_telegram_ids = result.scalars().all()

        tasks = []

        for user_telegram_id in users_telegram_ids:
            tasks.append(
                bot.send_message(
                    chat_id=user_telegram_id,
                    text=text_message,
                    disable_notification=disable_notification,
                )
            )

        results = await asyncio.gather(*tasks, return_exceptions=True)

        errors_details = ""
        successful_sendings = 0
        failed_sendings = 0

        for user_telegram_id, send_result in zip(
            users_telegram_ids, results, strict=False
        ):
            if isinstance(send_result, TelegramAPIError):
                logger.warning(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram id %s –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—à–∏–±–∫–∞: %s",
                    user_telegram_id,
                    result,
                )
                errors_details += f"- telegram_id {user_telegram_id}: {result}\n"
                failed_sendings += 1

            elif isinstance(send_result, Exception):
                logger.warning(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ telegram id %s. –û—à–∏–±–∫–∞ %s",
                    user_telegram_id,
                    result,
                )
                errors_details += f"- telegram_id {user_telegram_id}: {result}\n"
                failed_sendings += 1
            else:
                successful_sendings += 1

        logger.info(
            "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: %d, –û—à–∏–±–æ–∫: %d, –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d",
            successful_sendings,
            failed_sendings,
            len(users_telegram_ids),
        )

        summary_text = (
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_telegram_ids)}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {successful_sendings}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {failed_sendings}\n"
        )

        if errors_details:
            summary_text += "\n‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n" + errors_details

        return summary_text

    @staticmethod
    def write_new_info_text(text: str) -> None:
        with open("src/texts/info_text.txt", "w", encoding="utf-8") as file:
            file.write(text)

    @staticmethod
    async def set_session_duration(
        session: AsyncSession,
        duration_minutes: int,
    ) -> int:
        logger.info(
            "–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ %s –º–∏–Ω—É—Ç",
            duration_minutes,
        )
        stmt = (
            update(ScheduleSettings)
            .values(slot_duration_minutes=duration_minutes)
            .returning(ScheduleSettings.slot_duration_minutes)
        )
        result = await session.execute(stmt)
        await session.commit()

        logger.info(" –í—Ä–µ–º–µ–Ω—è —Å–µ–∞–Ω—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ %s –º–∏–Ω—É—Ç", duration_minutes)
        return result.scalar_one()
