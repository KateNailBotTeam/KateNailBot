services:
  bot:
    profiles:
      - dev
    build: .
    container_name: telegram-bot-container
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - backend
    restart: unless-stopped

  db:
    profiles:
      - dev
    image: postgres:17-alpine
    container_name: postgres-container
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    networks:
      - backend
    restart: unless-stopped

  redis:
    profiles:
      - dev
    image: redis:7.4-alpine
    container_name: redis-container
    env_file:
      - .env
    volumes:
      - redis_data:/data
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - backend

  tests:
    profiles:
      - test
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: test-bot-container
    command: [ "poetry", "run", "pytest" ]
    depends_on:
      - db_test
    env_file:
      - .env
    environment:
      - POSTGRES_DB=db_test
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - DB_HOST=db_test
      - DB_PORT=5432
      - DB_NAME=db_test
      - DB_USER=user
      - DB_PASS=pass
    networks:
      - backend

  db_test:
    profiles:
      - test
    env_file:
      - .env
    environment:
      - POSTGRES_DB=db_test
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - DB_HOST=db_test
      - DB_PORT=5432
      - DB_NAME=db_test
      - DB_USER=user
      - DB_PASS=pass
    image: postgres:17-alpine
    container_name: postgres-container-test
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - backend



volumes:
  db-data:
  redis_data:

networks:
  backend:
    driver: bridge

